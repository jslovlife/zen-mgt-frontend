import React, { useState } from 'react';
import { Building2, Save } from 'lucide-react';
import { useNavigate } from '@remix-run/react';
import { PageLayout } from '../components/layout/PageLayout';
import { Form, FormField, ButtonGroup } from '../components';
import type { ButtonConfig } from '../components';
import { Site } from '../types/site.type';
import { type LoaderFunctionArgs, type ActionFunctionArgs, json, redirect } from "@remix-run/node";
import { useActionData, useNavigation } from "@remix-run/react";
import { APIUtil } from "~/utils/api.util";
import { requireAuth } from "~/config/session.server";

// Loader function to protect the route
export async function loader({ request }: LoaderFunctionArgs) {
  console.log("=== SITE INSERT LOADER START ===");
  
  // Use the centralized authentication utility
  const session = requireAuth(request);
  
  console.log("Site insert auth token found:", session.authToken?.substring(0, 20) + "...");
  console.log("Site insert authentication passed, allowing access");
  
  return null;
}

const SiteInsert: React.FC = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    url: '',
    status: 'active' as 'active' | 'inactive',
    merchantId: '',
    description: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  // Handle form input changes
  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  // Validate form
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Site name is required';
    }

    if (!formData.url.trim()) {
      newErrors.url = 'Site URL is required';
    } else if (!isValidUrl(formData.url)) {
      newErrors.url = 'Please enter a valid URL';
    }

    if (!formData.merchantId.trim()) {
      newErrors.merchantId = 'Merchant ID is required';
    }

    if (!formData.description.trim()) {
      newErrors.description = 'Description is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // URL validation helper
  const isValidUrl = (url: string): boolean => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Create new site object
      const newSite: Site = {
        id: `site_${Date.now()}`, // In real app, this would be generated by backend
        ...formData,
        createdAt: new Date().toISOString(),
        createdBy: 'Current User', // In real app, get from auth context
        modifiedAt: new Date().toISOString(),
        modifiedBy: 'Current User'
      };

      console.log('Creating new site:', newSite);
      
      // Show success message
      alert('Site created successfully!');
      
      // Navigate back to site management
      navigate('/dashboard/site/site-management');
      
    } catch (error) {
      console.error('Error creating site:', error);
      alert('Failed to create site. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Handle cancel/back
  const handleCancel = () => {
    navigate('/dashboard/site/site-management');
  };

  return (
    <PageLayout
      title="Add New Site"
      icon={<Building2 />}
    >
      <div className="max-w-2xl mx-auto">
        {/* Form Card */}
        <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6">
          <Form onSubmit={handleSubmit}>
            {/* Site Name */}
            <FormField
              label="Site Name"
              name="name"
              type="text"
              value={formData.name}
              onChange={(value) => handleInputChange('name', value)}
              placeholder="Enter site name"
              required={true}
              error={errors.name}
              disabled={loading}
            />

            {/* Site URL */}
            <FormField
              label="Site URL"
              name="url"
              type="url"
              value={formData.url}
              onChange={(value) => handleInputChange('url', value)}
              placeholder="https://example.com"
              required={true}
              error={errors.url}
              disabled={loading}
            />

            {/* Merchant ID */}
            <FormField
              label="Merchant ID"
              name="merchantId"
              type="text"
              value={formData.merchantId}
              onChange={(value) => handleInputChange('merchantId', value)}
              placeholder="MCH001"
              required={true}
              error={errors.merchantId}
              disabled={loading}
            />

            {/* Status */}
            <FormField
              label="Status"
              name="status"
              type="select"
              value={formData.status}
              onChange={(value) => handleInputChange('status', value)}
              required={true}
              disabled={loading}
              options={[
                { value: 'active', label: 'Active' },
                { value: 'inactive', label: 'Inactive' }
              ]}
            />

            {/* Description */}
            <FormField
              label="Description"
              name="description"
              type="textarea"
              value={formData.description}
              onChange={(value) => handleInputChange('description', value)}
              placeholder="Enter site description"
              required={true}
              error={errors.description}
              disabled={loading}
              rows={4}
            />

            {/* Form Actions */}
            <ButtonGroup
              buttons={[
                {
                  label: 'Cancel',
                  type: 'button',
                  variant: 'secondary',
                  onClick: handleCancel,
                  disabled: loading
                },
                {
                  label: 'Create Site',
                  type: 'submit',
                  variant: 'primary',
                  loading: loading,
                  loadingText: 'Creating...',
                  icon: loading ? undefined : <Save className="w-4 h-4" />
                }
              ]}
            />
          </Form>
        </div>
      </div>
    </PageLayout>
  );
};

export default SiteInsert; 